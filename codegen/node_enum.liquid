// This file is autogenerated by {{ template }}

use crate::nodes::InnerNode;
use crate::nodes::*;

/// Generic combination of all known nodes.
#[allow(missing_docs)]
#[derive(Debug, Clone, PartialEq)]
pub enum Node<'a> {
{%- for node in nodes %}
    {%- assign generic = "" -%}
    {%- for field in node.fields -%}
        {%- case field.field_type -%}
        {%- when "StringValue" or "Str" or "RawStr" or "MaybeStr" or "Chars" or "Node" or "Nodes" or "MaybeNode" -%}
            {%- assign generic = "<'a>" -%}
            {%- break -%}
        {%- endcase -%}
    {%- endfor %}
    {{ node.camelcase_name }}({{ node.camelcase_name }}{{ generic }}),
{%- endfor %}
}

impl<'a> Node<'a> {
    pub(crate) fn inner_ref(&self) -> &dyn InnerNode {
        match &self {
{%- for node in nodes %}
            Node::{{ node.camelcase_name }}(inner) => inner,
{%- endfor %}
        }
    }
}
